mean(covariates$kcal24h0[covariates$hunger <= 1.693 & covariates$liking > -0.277])
mean(covariates$kcal24h0[covariates$hunger <= 1.693 & covariates$liking > -0.277 & covariates$rrvfood <= -1.261])
NROW(mat_temp)
mat_temp[1,]
mat_temp[2,]
mat_temp[3,]
mean(covariates$kcal24h0[covariates$hunger <= 1.693 & covariates$liking <= -0.277])
mean(covariates$kcal24h0[covariates$hunger <= 1.693 & covariates$liking > -0.277])
mean(covariates$kcal24h0[covariates$hunger <= 1.693 & covariates$liking > -0.277 & covariates$rrvfood <= -1.261])
mean(covariates$kcal24h0[covariates$hunger <= 1.693 & covariates$liking > -0.277 & covariates$rrvfood > -1.261])
<- c()
temp$frame$yval
temp$frame
temp <-rpart(kcal24h0~., model = TRUE, data = covariates,control = rpart.control(maxdepth=3,
cp=0.03001, maxcompete = 0, maxsurrogate = 0)
)
library(gridExtra)
library(rpart.utils)
load("~/visTree/data/blsdata.RData")
setwd("~/treevalues")
devtools::load_all()
## Note that this code literally comes from their VISTREE github page.
covariates <-blsdata %>% dplyr::select(hunger, disinhibition, resteating, rrvfood, liking, wanting, kcal24h0)
covariates<-data.frame(scale(covariates))
p2<-partykit::ctree(kcal24h0~hunger+ disinhibition+resteating+rrvfood+ liking+wanting, data = covariates, control = ctree_control(mincriterion = 0.95))
sigma_y <- sd(covariates$kcal24h0)
mat2 <- fullTreeInference(p4, sigma_y)
par(mfrow=c(1,1))
treeval.plot(p4, mat2)
p4<-rpart(kcal24h0~., model = TRUE, data = covariates,control = rpart.control(cp = 0.0185, maxcompete = 0, maxsurrogate = 0))
### Conservative estimate.
sigma_y <- sd(covariates$kcal24h0)
mat2 <- fullTreeInference(p4, sigma_y)
par(mfrow=c(1,1))
treeval.plot(p4, mat2)
temp <-rpart(kcal24h0~., model = TRUE, data = covariates,control = rpart.control(maxdepth=3,
cp=0.03001, maxcompete = 0, maxsurrogate = 0)
)
mat_temp <- fullTreeInference(temp, sigma_y)
temp$frame$var[2] <- "liking"
row.names(temp$splits)[2] <- "liking"
temp$splits[1,4] <- 1.693
temp$splits[2,4] <- -0.277
temp$splits[3,4] <- -1.261
rpart.plot(temp, extra=0)
c(0.00000000 -0.09118071, -0.458, 0.1414685,
-0.309,0.259, 1.38073645)
mat_temp$split[1] <- " "
mat_temp$split[2] <- "dat$ hunger  < 1.69288"
mat_temp$split[3] <-
"dat$ hunger  < 1.69288 & dat$ liking  < -0.27679"
mat_temp$split[4] <-
"dat$ hunger  < 1.69288 & dat$ liking  >= -0.27679 & dat$ rrvfood  < -1.26067"
mat_temp$pval <- c(NA, 0.00001, 0.00001, 0.016)
mean(covariates$kcal24h0[covariates$hunger <= 1.693])
temp$frame$var[2] <- "liking"
row.names(temp$splits)[2] <- "liking"
temp$splits[1,4] <- 1.693
temp$splits[2,4] <- -0.277
temp$splits[3,4] <- -1.261
rpart.plot(temp, extra=0)
mat_temp$split[1] <- " "
mat_temp$split[2] <- "dat$ hunger  < 1.69288"
mat_temp$split[3] <-
"dat$ hunger  < 1.69288 & dat$ liking  < -0.27679"
mat_temp$split[4] <-
"dat$ hunger  < 1.69288 & dat$ liking  >= -0.27679 & dat$ rrvfood  < -1.26067"
mat_temp$pval <- c(NA, 0.00001, 0.00001, 0.016)
mean(covariates$kcal24h0[covariates$hunger <= 1.693])
mean(covariates$kcal24h0[covariates$hunger > 1.693])
mean(covariates$kcal24h0[covariates$hunger <= 1.693 & covariates$liking <= -0.277])
mean(covariates$kcal24h0[covariates$hunger <= 1.693 & covariates$liking > -0.277])
mean(covariates$kcal24h0[covariates$hunger <= 1.693 & covariates$liking > -0.277 & covariates$rrvfood <= -1.261])
mean(covariates$kcal24h0[covariates$hunger <= 1.693 & covariates$liking > -0.277 & covariates$rrvfood > -1.261])
temp$frame$yval<- c(0, -0.09118071,-0.43876,0.1414685,-0.5060532,0.234805,1.38073645)
mat_temp$branch1mean <- c(NA, -0.09118071, -0.43876, -0.5060532)
mat_temp$branch2mean <- c(NA, 1.380736, 0.1414685, 0.234805)
temp$frame$yval <-
mat_temp[1:4,c(4,5,7,8,10,11)] <- NA
temp$frame$yval<- c(0, -0.09118071,-0.43876,0.1414685,-0.5060532,0.234805,1.38073645)
mat_temp$branch1mean <- c(NA, -0.09118071, -0.43876, -0.5060532)
mat_temp$branch2mean <- c(NA, 1.380736, 0.1414685, 0.234805)
mat_temp[1:4,c(4,5,7,8,10,11)] <- NA
temp$frame$yval[1] <- 0
p4$frame$yval[1] <- 0
#### NOTE: make a simple version of plotting function with BIG FONT that shows:
### CI, Fitted Mean, PVAL.
### DO WE NEED N??
devtools::unload("treevalues")
source("~/treevalues/R/plotting_REDUCED_PAPER.R")
source("~/treevalues/R/helpers_REDUCED_PAPER.R")
treeval.plot.reduced(p4, mat2)
treeval.plot.reduced(temp, mat_temp)
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, message=FALSE)
library(rpart)
library(intervals)
library(partykit)
library(tidyverse)
library(gridExtra)
library(knitr)
setwd("~/ActuallyRealSimsJANUARY/")
nullRes <- read.csv("null_res_1-18-2021-5000.csv", sep=" ", header=FALSE)
names(nullRes) <- c("cp", "seed", "method", "type", "depth", "pval", "n1", "n2", "sampsig", "NA")
quants_treevalue_split1 <- sort((nullRes %>% filter(depth==1,method=="Tree-Values", type=="split"))$pval)
quants_pvalue_split1 <- sort((nullRes %>% filter(depth==1,method=="NaiveZ",type=="split"))$pval)
quants_sampsplit_split1 <- sort((nullRes %>% filter(depth==1,method=="splitting", type=="split"))$pval)
quants_treevalue_split2 <- sort((nullRes %>% filter(depth==2,method=="Tree-Values", type=="split"))$pval)
quants_pvalue_split2 <- sort((nullRes %>% filter(depth==2,method=="NaiveZ",type=="split"))$pval)
quants_sampsplit_split2 <- sort((nullRes %>% filter(depth==2,method=="splitting", type=="split"))$pval)
quants_treevalue_split3 <- sort((nullRes %>% filter(depth==3,method=="Tree-Values", type=="split"))$pval)
quants_pvalue_split3 <- sort((nullRes %>% filter(depth==3,method=="NaiveZ",type=="split"))$pval)
quants_sampsplit_split3 <- sort((nullRes %>% filter(depth==3,method=="splitting", type=="split"))$pval)
p1 <- ggplot(data=NULL) +
geom_point(aes(x=qunif(seq(0,1,length.out=length(quants_pvalue_split1))), y=quants_pvalue_split1, col="Naive Z-test"), alpha=0.1) +
geom_point(aes(x=qunif(seq(0,1,length.out=length(quants_sampsplit_split1))), y=quants_sampsplit_split1, col="Sample Splitting"),alpha=1, size=2)+
geom_point(aes(x=qunif(seq(0,1,length.out=length(quants_treevalue_split1))), y=quants_treevalue_split1, col="Selective Z-test in (6)"),alpha=1, size=1)+
geom_abline(slope=1, intercept=0)+xlab("") + ylab("Empirical Quantiles")+ggtitle("Level 1") +
theme(plot.title = element_text(size = 12),axis.title=element_text(size = 7.5)) +
coord_fixed()+theme_bw() + labs(col="Method")+guides(col=FALSE)
p2 <- ggplot(data=NULL) +
geom_point(aes(x=qunif(seq(0,1,length.out=length(quants_pvalue_split2))), y=quants_pvalue_split2, col="Naive Z-test"), alpha=1) +
geom_point(aes(x=qunif(seq(0,1,length.out=length(quants_sampsplit_split2))), y=quants_sampsplit_split2, col="Sample Splitting"),alpha=1, size=2)+
geom_point(aes(x=qunif(seq(0,1,length.out=length(quants_treevalue_split2))), y=quants_treevalue_split2, col="Selective Z-test in (6)"), alpha=1, size=1) +
geom_abline(slope=1, intercept=0)+xlab("U(0,1) Quantiles") + ylab("")+ggtitle("Level 2") +
theme(plot.title = element_text(size = 12),axis.title=element_text(size = 7.5)) +
coord_fixed()+theme_bw() + labs(col="Method")+guides(col=FALSE)
p3 <- ggplot(data=NULL)+
geom_point(aes(x=qunif(seq(0,1,length.out=length(quants_pvalue_split3))), y=quants_pvalue_split3, col="Naive Z-test"), alpha=1) +
geom_point(aes(x=qunif(seq(0,1,length.out=length(quants_sampsplit_split3))), y=quants_sampsplit_split3, col="Sample Splitting"),alpha=1, size=2)+
geom_point(aes(x=qunif(seq(0,1,length.out=length(quants_treevalue_split3))), y=quants_treevalue_split3, col="Selective Z-test in (6)"), alpha=1, size=1)+
geom_abline(slope=1, intercept=0)+xlab("") + ylab("")+ggtitle("Level 3") +
theme(plot.title = element_text(size = 12),axis.title=element_text(size = 7.5)) +
coord_fixed()+theme_bw() + guides(col=FALSE)
### Note to self!!! The sizes were not working out well automatically. Cropped out white space in preview.
#ggsave(
#  filename = "~/Dropbox/Tree Values Paper/newformat_21/Figures/Type1Error_nolegend.png",
#  grid.arrange(p1,p2, p3, widths=c(3,3,3)),
# width=15, height=4.5, units="cm"
#)
grid.arrange(p1,p2, p3, widths=c(3,3,3))
res<- read.csv("~/ActuallyRealSimsJANUARY/Full_Rand_Comps_1-18-2021-maxdepth3.csv", header=FALSE,sep=" ")
names(res)<- c("cp", "seed", "depth", "beta", "method", "pval", "truesig",
"n1", "n2", "samplesig", "bestRand", "whichSplit","XORlev", "best", "NA")
res2 <- res %>% group_by(cp, method, seed,XORlev,beta, depth, pval, truesig, n1, n2, samplesig) %>% summarize(bestRand = max(bestRand), whichSplit = whichSplit[which.max(bestRand)])
res2 <- res2 %>% mutate(whichSplitLev = ifelse(whichSplit >=3,3,whichSplit))
res2 <- res2 %>% mutate(truesplitlev = ifelse(whichSplit >=3, 3, whichSplit))
res2 <- res2 %>%
mutate(
correct = as.numeric(bestRand > 0.75),
correctreject = as.numeric(bestRand > 0.75 & pval < 0.05)
)
#### HOW MANY TRUE TREES WERE MADE FOR EACH BETA
ntree <-  NROW((res %>% filter(depth==1,method=="condition",XORlev==2,beta==10)))
groupRes <- res2 %>% group_by(method, XORlev, truesplitlev, beta) %>% summarize(
numcorrect = sum(correct),
numcorrectreject = sum(correctreject)
) %>%
mutate(propCorrect = ifelse(truesplitlev < 3, numcorrect/ntree, numcorrect/(2*ntree)),
propCorrectReject= ifelse(truesplitlev < 3, numcorrectreject/ntree, numcorrectreject/(2*ntree))
) %>%
mutate(
beta=as.numeric(beta),
propCorrect=as.numeric(propCorrect),
propCorrectReject=as.numeric(propCorrectReject)
) %>%
mutate(truesplitlev = paste("Level ", truesplitlev))
###  MAIN PLOT
groupRes$method <- factor(groupRes$method, ordered=TRUE, levels=c("splitting","ctree","condition"))
groupRes$XORlev2 <- paste0("a=", groupRes$XORlev)
p2 <- ggplot(data=groupRes #%>% filter(method != "ctree")
, aes(x=beta, y=propCorrect, col=interaction(method, "detect"), lty=interaction(method, "detect"))) + geom_smooth(se=F)+
geom_smooth(data=groupRes, aes(x=beta,y=propCorrectReject, col=interaction(method,"reject"), lty=interaction(method,"reject")),
se=F)+
ylab("Proportion of True Splits Detected or Rejected")+xlab("b")+
scale_color_manual(name = "Method", values = c("#00BFC4", "#00BFC4","#F8766D", "#F8766D","black", "black"),
labels=c("CART with selective Z-tests, detection",
"CART with selective Z-tests, rejection",
"CTree, detection and rejection",
"",
"CART with sample splitting, detection",
"CART with sample splitting, rejection")) +
scale_linetype_manual(name = "Method", values = c(1,3,1,0,1,3),
labels=c("CART with selective Z-tests, detection",
"CART with selective Z-tests, rejection",
"CTree, detection and rejection",
"",
"CART with sample splitting, detection",
"CART with sample splitting, rejection"))+
facet_grid(cols = vars(XORlev2), rows = vars(truesplitlev)) + theme_bw()+
theme(legend.position="bottom") +guides(color=guide_legend(
title.position="top", title.theme=element_text(colour="white",size=2),
label.theme=element_text(size=8), nrow=2,byrow=FALSE))
p2
ggsave(filename="~/Dropbox/Tree Values Paper/newformat_v14/Figures/mainPower.png", p2, units="cm", width=16, height=11)
res <- read.csv("~/ActuallyRealSimsJANUARY/non_null_CI_main-1-18-2021", header=FALSE, sep=" ")
names(res) <- c("beta", "XORLev", "cp", "seed", "method", "type", "depth", "pval", "lower", "upper", "n1", "n2", "sampsig","truesig", "truesigtest", "sizeS", "sizeNum")
res <- res %>% mutate(correctCI = lower < truesig & upper > truesig, correctCItest = lower < truesigtest & upper > truesigtest,
length = upper - lower, invalid = n1*n2==0)
res <- res %>% filter(XORLev != 0, XORLev !=3)
res %>% group_by(method, type, depth) %>% summarize("Full Coverage" = round(mean(correctCI, na.rm=TRUE),3),"Test Coverage" = round(mean(correctCItest, na.rm=TRUE),3))
#"Number of Attempts" = n(),
#"Number of Intervals" = sum(!is.na(length))))
library(gridExtra)
library(rpart.utils)
load("~/visTree/data/blsdata.RData")
setwd("~/treevalues")
devtools::load_all()
## Note that this code literally comes from their VISTREE github page.
covariates <-blsdata %>% dplyr::select(hunger, disinhibition, resteating, rrvfood, liking, wanting, kcal24h0)
covariates<-data.frame(scale(covariates))
p2<-partykit::ctree(kcal24h0~hunger+ disinhibition+resteating+rrvfood+ liking+wanting, data = covariates, control = ctree_control(mincriterion = 0.95))
p4<-rpart(kcal24h0~., model = TRUE, data = covariates,control = rpart.control(cp = 0.0185, maxcompete = 0, maxsurrogate = 0))
### Conservative estimate.
sigma_y <- sd(covariates$kcal24h0)
mat2 <- fullTreeInference(p4, sigma_y)
temp <-rpart(kcal24h0~., model = TRUE, data = covariates,control = rpart.control(maxdepth=3,
cp=0.03001, maxcompete = 0, maxsurrogate = 0)
)
mat_temp <- fullTreeInference(temp, sigma_y)
temp$frame$var[2] <- "liking"
row.names(temp$splits)[2] <- "liking"
groupRes <- res %>%
filter(depth < 4,XORLev %in% c(0.5,1,2)) %>%
group_by(method, beta, XORLev, depth,type) %>% summarize(length=median(length,na.rm=TRUE))
groupRes <- groupRes %>% mutate(XORlev2 = paste0("a=", XORLev),
depth2 = paste0("Level ", depth),
method=ifelse(method=="splitting", "Sample splitting", method))
groupRes$method2 <- "(??), reg"
groupRes$method2[groupRes$method=="Tree-Values" & groupRes$type=="split"] <-
"(10), sib"
groupRes$method2[groupRes$method=="Sample splitting" & groupRes$type=="split"] <-
"Sample splitting, sib"
groupRes$method2[groupRes$method=="Sample splitting" & groupRes$type=="child"] <-
"Sample splitting, reg"
p3 <- ggplot(data=groupRes, aes(x=beta, y=length, col=method2, lty=method2))+ geom_smooth()+facet_grid(cols=vars(XORlev2), rows=vars(depth2))+scale_y_log10()+ylab("Median Confidence Interval Width")+xlab("b")+
scale_colour_manual(
name="Method",
values = c("deepskyblue1","deepskyblue3","hotpink1", "indianred3"),
labels=c(
expression(paste("Selective Z-interval in (29),", nu[reg]^T~mu, "        ")),
expression(paste("Selective Z-interval in (11),", nu[sib]^T~mu, "        ")),
expression(paste("Sample splitting," , nu[reg]^T~mu)),
expression(paste("Sample splitting,", nu[sib]^T~mu))))+
theme_bw()+ scale_linetype_manual(
name = "Method", values = c(1,1,3,3),
labels=c(
expression(paste("Selective Z-interval in (29),", nu[reg]^T~mu, "        ")),
expression(paste("Selective Z-interval in (11),", nu[sib]^T~mu, "        ")),
expression(paste("Sample splitting," , nu[reg]^T~mu)),
expression(paste("Sample splitting,", nu[sib]^T~mu))))+
guides(color=guide_legend(
title.position="top", title.theme=element_text(colour="white",size=2), nrow=2,byrow=FALSE,
keywidth=3))+ theme(legend.position="bottom",legend.spacing.x = unit(0.25, "cm"))
p4 <- ggplot(data=groupRes, aes(x=beta, y=length, col=method2, lty=method2))+ geom_smooth()+facet_grid(cols=vars(XORlev2), rows=vars(depth2))+scale_y_log10()+ylab("Median Confidence Interval Width")+xlab("b")+
scale_colour_manual(
name="Method",
values = c("deepskyblue1","deepskyblue3","hotpink1", "indianred3"),
labels=c(
expression(paste("Selective Z-interval in (29),", nu[reg]^T~mu, "        ")),
expression(paste("Selective Z-interval in (11),", nu[sib]^T~mu, "        ")),
expression(paste("Sample splitting," , nu[reg]^T~mu)),
expression(paste("Sample splitting,", nu[sib]^T~mu))))+
theme_bw()+ scale_linetype_manual(
name = "Method", values = c(1,3,1,3),
labels=c(
expression(paste("Selective Z-interval in (29),", nu[reg]^T~mu, "        ")),
expression(paste("Selective Z-interval in (11),", nu[sib]^T~mu, "        ")),
expression(paste("Sample splitting," , nu[reg]^T~mu)),
expression(paste("Sample splitting,", nu[sib]^T~mu))))+
guides(color=guide_legend(
title.position="top", title.theme=element_text(colour="white",size=2), nrow=2,byrow=FALSE,
keywidth=3))+ theme(legend.position="bottom",legend.spacing.x = unit(0.25, "cm"))
p4 + guides(col=FALSE, lty=FALSE)
ggsave(filename="~/Dropbox/Tree Values Paper/newformat_21/Figures/CI_width_nolegend.png",
p4+ guides(col=FALSE, lty=FALSE),
width=16,
height=8,
units="cm")
groupRes <- res %>%
filter(depth < 4,XORLev %in% c(0.5,1,2)) %>%
group_by(method, beta, XORLev, depth,type) %>% summarize(length=median(length,na.rm=TRUE))
groupRes <- groupRes %>% mutate(XORlev2 = paste0("a=", XORLev),
depth2 = paste0("Level ", depth),
method=ifelse(method=="splitting", "Sample splitting", method))
groupRes$method2 <- "(??), reg"
groupRes$method2[groupRes$method=="Tree-Values" & groupRes$type=="split"] <-
"(10), sib"
groupRes$method2[groupRes$method=="Sample splitting" & groupRes$type=="split"] <-
"Sample splitting, sib"
groupRes$method2[groupRes$method=="Sample splitting" & groupRes$type=="child"] <-
"Sample splitting, reg"
p3 <- ggplot(data=groupRes, aes(x=beta, y=length, col=method2, lty=method2))+ geom_smooth()+facet_grid(cols=vars(XORlev2), rows=vars(depth2))+scale_y_log10()+ylab("Median Confidence Interval Width")+xlab("b")+
scale_colour_manual(
name="Method",
values = c("deepskyblue1","deepskyblue3","hotpink1", "indianred3"),
labels=c(
expression(paste("Selective Z-interval in (29),", nu[reg]^T~mu, "        ")),
expression(paste("Selective Z-interval in (11),", nu[sib]^T~mu, "        ")),
expression(paste("Sample splitting," , nu[reg]^T~mu)),
expression(paste("Sample splitting,", nu[sib]^T~mu))))+
theme_bw()+ scale_linetype_manual(
name = "Method", values = c(1,1,3,3),
labels=c(
expression(paste("Selective Z-interval in (29),", nu[reg]^T~mu, "        ")),
expression(paste("Selective Z-interval in (11),", nu[sib]^T~mu, "        ")),
expression(paste("Sample splitting," , nu[reg]^T~mu)),
expression(paste("Sample splitting,", nu[sib]^T~mu))))+
guides(color=guide_legend(
title.position="top", title.theme=element_text(colour="white",size=2), nrow=2,byrow=FALSE,
keywidth=3))+ theme(legend.position="bottom",legend.spacing.x = unit(0.25, "cm"))
p4 <- ggplot(data=groupRes, aes(x=beta, y=length, col=method2, lty=method2))+ geom_smooth()+facet_grid(cols=vars(XORlev2), rows=vars(depth2))+scale_y_log10()+ylab("Median Confidence Interval Width")+xlab("b")+
scale_colour_manual(
name="Method",
values = c("deepskyblue1","deepskyblue3","hotpink1", "indianred3"),
labels=c(
expression(paste("Selective Z-interval in (29),", nu[reg]^T~mu, "        ")),
expression(paste("Selective Z-interval in (11),", nu[sib]^T~mu, "        ")),
expression(paste("Sample splitting," , nu[reg]^T~mu)),
expression(paste("Sample splitting,", nu[sib]^T~mu))))+
theme_bw()+ scale_linetype_manual(
name = "Method", values = c(1,3,1,3),
labels=c(
expression(paste("Selective Z-interval in (29),", nu[reg]^T~mu, "        ")),
expression(paste("Selective Z-interval in (11),", nu[sib]^T~mu, "        ")),
expression(paste("Sample splitting," , nu[reg]^T~mu)),
expression(paste("Sample splitting,", nu[sib]^T~mu))))+
guides(color=guide_legend(
title.position="top", title.theme=element_text(colour="white",size=2), nrow=2,byrow=FALSE,
keywidth=3))+ theme(legend.position="bottom",legend.spacing.x = unit(0.25, "cm"))
p4 + guides(col=FALSE, lty=FALSE)
#ggsave(filename="~/Dropbox/Tree Values Paper/newformat_21/Figures/CI_width_nolegend.png",
#       p4+ guides(col=FALSE, lty=FALSE),
#       width=16,
#       height=8,
#       units="cm")
#ggsave(filename="~/Dropbox/Tree Values Paper/newformat_v15/Figures/CI_width.png",
#       p3,
#       width=16,
#       height=10,
#       units="cm")
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, message=FALSE)
library(rpart)
library(intervals)
library(partykit)
library(tidyverse)
library(gridExtra)
library(knitr)
setwd("~/Dropbox/Tree Values Paper/Code : Other for Creating All Figures")
nullRes <- read.csv("null_res_1-18-2021-5000.csv", sep=" ", header=FALSE)
names(nullRes) <- c("cp", "seed", "method", "type", "depth", "pval", "n1", "n2", "sampsig", "NA")
quants_treevalue_split1 <- sort((nullRes %>% filter(depth==1,method=="Tree-Values", type=="split"))$pval)
quants_pvalue_split1 <- sort((nullRes %>% filter(depth==1,method=="NaiveZ",type=="split"))$pval)
quants_sampsplit_split1 <- sort((nullRes %>% filter(depth==1,method=="splitting", type=="split"))$pval)
quants_treevalue_split2 <- sort((nullRes %>% filter(depth==2,method=="Tree-Values", type=="split"))$pval)
quants_pvalue_split2 <- sort((nullRes %>% filter(depth==2,method=="NaiveZ",type=="split"))$pval)
quants_sampsplit_split2 <- sort((nullRes %>% filter(depth==2,method=="splitting", type=="split"))$pval)
quants_treevalue_split3 <- sort((nullRes %>% filter(depth==3,method=="Tree-Values", type=="split"))$pval)
quants_pvalue_split3 <- sort((nullRes %>% filter(depth==3,method=="NaiveZ",type=="split"))$pval)
quants_sampsplit_split3 <- sort((nullRes %>% filter(depth==3,method=="splitting", type=="split"))$pval)
p1 <- ggplot(data=NULL) +
geom_point(aes(x=qunif(seq(0,1,length.out=length(quants_pvalue_split1))), y=quants_pvalue_split1, col="Naive Z-test"), alpha=0.1) +
geom_point(aes(x=qunif(seq(0,1,length.out=length(quants_sampsplit_split1))), y=quants_sampsplit_split1, col="Sample Splitting"),alpha=1, size=2)+
geom_point(aes(x=qunif(seq(0,1,length.out=length(quants_treevalue_split1))), y=quants_treevalue_split1, col="Selective Z-test in (6)"),alpha=1, size=1)+
geom_abline(slope=1, intercept=0)+xlab("") + ylab("Empirical Quantiles")+ggtitle("Level 1") +
theme(plot.title = element_text(size = 12),axis.title=element_text(size = 7.5)) +
coord_fixed()+theme_bw() + labs(col="Method")+guides(col=FALSE)
p2 <- ggplot(data=NULL) +
geom_point(aes(x=qunif(seq(0,1,length.out=length(quants_pvalue_split2))), y=quants_pvalue_split2, col="Naive Z-test"), alpha=1) +
geom_point(aes(x=qunif(seq(0,1,length.out=length(quants_sampsplit_split2))), y=quants_sampsplit_split2, col="Sample Splitting"),alpha=1, size=2)+
geom_point(aes(x=qunif(seq(0,1,length.out=length(quants_treevalue_split2))), y=quants_treevalue_split2, col="Selective Z-test in (6)"), alpha=1, size=1) +
geom_abline(slope=1, intercept=0)+xlab("U(0,1) Quantiles") + ylab("")+ggtitle("Level 2") +
theme(plot.title = element_text(size = 12),axis.title=element_text(size = 7.5)) +
coord_fixed()+theme_bw() + labs(col="Method")+guides(col=FALSE)
p3 <- ggplot(data=NULL)+
geom_point(aes(x=qunif(seq(0,1,length.out=length(quants_pvalue_split3))), y=quants_pvalue_split3, col="Naive Z-test"), alpha=1) +
geom_point(aes(x=qunif(seq(0,1,length.out=length(quants_sampsplit_split3))), y=quants_sampsplit_split3, col="Sample Splitting"),alpha=1, size=2)+
geom_point(aes(x=qunif(seq(0,1,length.out=length(quants_treevalue_split3))), y=quants_treevalue_split3, col="Selective Z-test in (6)"), alpha=1, size=1)+
geom_abline(slope=1, intercept=0)+xlab("") + ylab("")+ggtitle("Level 3") +
theme(plot.title = element_text(size = 12),axis.title=element_text(size = 7.5)) +
coord_fixed()+theme_bw() + guides(col=FALSE)
### Note to self!!! The sizes were not working out well automatically. Cropped out white space in preview.
#ggsave(
#  filename = "~/Dropbox/Tree Values Paper/newformat_21/Figures/Type1Error_nolegend.png",
#  grid.arrange(p1,p2, p3, widths=c(3,3,3)),
# width=15, height=4.5, units="cm"
#)
grid.arrange(p1,p2, p3, widths=c(3,3,3))
res<- read.csv("Full_Rand_Comps_1-18-2021-maxdepth3.csv", header=FALSE,sep=" ")
names(res)<- c("cp", "seed", "depth", "beta", "method", "pval", "truesig",
"n1", "n2", "samplesig", "bestRand", "whichSplit","XORlev", "best", "NA")
res2 <- res %>% group_by(cp, method, seed,XORlev,beta, depth, pval, truesig, n1, n2, samplesig) %>% summarize(bestRand = max(bestRand), whichSplit = whichSplit[which.max(bestRand)])
res2 <- res2 %>% mutate(whichSplitLev = ifelse(whichSplit >=3,3,whichSplit))
res2 <- res2 %>% mutate(truesplitlev = ifelse(whichSplit >=3, 3, whichSplit))
res2 <- res2 %>%
mutate(
correct = as.numeric(bestRand > 0.75),
correctreject = as.numeric(bestRand > 0.75 & pval < 0.05)
)
#### HOW MANY TRUE TREES WERE MADE FOR EACH BETA
ntree <-  NROW((res %>% filter(depth==1,method=="condition",XORlev==2,beta==10)))
groupRes <- res2 %>% group_by(method, XORlev, truesplitlev, beta) %>% summarize(
numcorrect = sum(correct),
numcorrectreject = sum(correctreject)
) %>%
mutate(propCorrect = ifelse(truesplitlev < 3, numcorrect/ntree, numcorrect/(2*ntree)),
propCorrectReject= ifelse(truesplitlev < 3, numcorrectreject/ntree, numcorrectreject/(2*ntree))
) %>%
mutate(
beta=as.numeric(beta),
propCorrect=as.numeric(propCorrect),
propCorrectReject=as.numeric(propCorrectReject)
) %>%
mutate(truesplitlev = paste("Level ", truesplitlev))
###  MAIN PLOT
groupRes$method <- factor(groupRes$method, ordered=TRUE, levels=c("splitting","ctree","condition"))
groupRes$XORlev2 <- paste0("a=", groupRes$XORlev)
p2 <- ggplot(data=groupRes #%>% filter(method != "ctree")
, aes(x=beta, y=propCorrect, col=interaction(method, "detect"), lty=interaction(method, "detect"))) + geom_smooth(se=F)+
geom_smooth(data=groupRes, aes(x=beta,y=propCorrectReject, col=interaction(method,"reject"), lty=interaction(method,"reject")),
se=F)+
ylab("Proportion of True Splits Detected or Rejected")+xlab("b")+
scale_color_manual(name = "Method", values = c("#00BFC4", "#00BFC4","#F8766D", "#F8766D","black", "black"),
labels=c("CART with selective Z-tests, detection",
"CART with selective Z-tests, rejection",
"CTree, detection and rejection",
"",
"CART with sample splitting, detection",
"CART with sample splitting, rejection")) +
scale_linetype_manual(name = "Method", values = c(1,3,1,0,1,3),
labels=c("CART with selective Z-tests, detection",
"CART with selective Z-tests, rejection",
"CTree, detection and rejection",
"",
"CART with sample splitting, detection",
"CART with sample splitting, rejection"))+
facet_grid(cols = vars(XORlev2), rows = vars(truesplitlev)) + theme_bw()+
theme(legend.position="bottom") +guides(color=guide_legend(
title.position="top", title.theme=element_text(colour="white",size=2),
label.theme=element_text(size=8), nrow=2,byrow=FALSE))
p2
#ggsave(filename="~/Dropbox/Tree Values Paper/newformat_v14/Figures/mainPower.png", p2, units="cm", width=16, height=11)
res <- read.csv("non_null_CI_main-1-18-2021", header=FALSE, sep=" ")
names(res) <- c("beta", "XORLev", "cp", "seed", "method", "type", "depth", "pval", "lower", "upper", "n1", "n2", "sampsig","truesig", "truesigtest", "sizeS", "sizeNum")
res <- res %>% mutate(correctCI = lower < truesig & upper > truesig, correctCItest = lower < truesigtest & upper > truesigtest,
length = upper - lower, invalid = n1*n2==0)
res <- res %>% filter(XORLev != 0, XORLev !=3)
res %>% group_by(method, type, depth) %>% summarize("Full Coverage" = round(mean(correctCI, na.rm=TRUE),3),"Test Coverage" = round(mean(correctCItest, na.rm=TRUE),3))
#"Number of Attempts" = n(),
#"Number of Intervals" = sum(!is.na(length))))
groupRes <- res %>%
filter(depth < 4,XORLev %in% c(0.5,1,2)) %>%
group_by(method, beta, XORLev, depth,type) %>% summarize(length=median(length,na.rm=TRUE))
groupRes <- groupRes %>% mutate(XORlev2 = paste0("a=", XORLev),
depth2 = paste0("Level ", depth),
method=ifelse(method=="splitting", "Sample splitting", method))
groupRes$method2 <- "(??), reg"
groupRes$method2[groupRes$method=="Tree-Values" & groupRes$type=="split"] <-
"(10), sib"
groupRes$method2[groupRes$method=="Sample splitting" & groupRes$type=="split"] <-
"Sample splitting, sib"
groupRes$method2[groupRes$method=="Sample splitting" & groupRes$type=="child"] <-
"Sample splitting, reg"
p3 <- ggplot(data=groupRes, aes(x=beta, y=length, col=method2, lty=method2))+ geom_smooth()+facet_grid(cols=vars(XORlev2), rows=vars(depth2))+scale_y_log10()+ylab("Median Confidence Interval Width")+xlab("b")+
scale_colour_manual(
name="Method",
values = c("deepskyblue1","deepskyblue3","hotpink1", "indianred3"),
labels=c(
expression(paste("Selective Z-interval in (29),", nu[reg]^T~mu, "        ")),
expression(paste("Selective Z-interval in (11),", nu[sib]^T~mu, "        ")),
expression(paste("Sample splitting," , nu[reg]^T~mu)),
expression(paste("Sample splitting,", nu[sib]^T~mu))))+
theme_bw()+ scale_linetype_manual(
name = "Method", values = c(1,1,3,3),
labels=c(
expression(paste("Selective Z-interval in (29),", nu[reg]^T~mu, "        ")),
expression(paste("Selective Z-interval in (11),", nu[sib]^T~mu, "        ")),
expression(paste("Sample splitting," , nu[reg]^T~mu)),
expression(paste("Sample splitting,", nu[sib]^T~mu))))+
guides(color=guide_legend(
title.position="top", title.theme=element_text(colour="white",size=2), nrow=2,byrow=FALSE,
keywidth=3))+ theme(legend.position="bottom",legend.spacing.x = unit(0.25, "cm"))
p4 <- ggplot(data=groupRes, aes(x=beta, y=length, col=method2, lty=method2))+ geom_smooth()+facet_grid(cols=vars(XORlev2), rows=vars(depth2))+scale_y_log10()+ylab("Median Confidence Interval Width")+xlab("b")+
scale_colour_manual(
name="Method",
values = c("deepskyblue1","deepskyblue3","hotpink1", "indianred3"),
labels=c(
expression(paste("Selective Z-interval in (29),", nu[reg]^T~mu, "        ")),
expression(paste("Selective Z-interval in (11),", nu[sib]^T~mu, "        ")),
expression(paste("Sample splitting," , nu[reg]^T~mu)),
expression(paste("Sample splitting,", nu[sib]^T~mu))))+
theme_bw()+ scale_linetype_manual(
name = "Method", values = c(1,3,1,3),
labels=c(
expression(paste("Selective Z-interval in (29),", nu[reg]^T~mu, "        ")),
expression(paste("Selective Z-interval in (11),", nu[sib]^T~mu, "        ")),
expression(paste("Sample splitting," , nu[reg]^T~mu)),
expression(paste("Sample splitting,", nu[sib]^T~mu))))+
guides(color=guide_legend(
title.position="top", title.theme=element_text(colour="white",size=2), nrow=2,byrow=FALSE,
keywidth=3))+ theme(legend.position="bottom",legend.spacing.x = unit(0.25, "cm"))
p4 + guides(col=FALSE, lty=FALSE)
#ggsave(filename="~/Dropbox/Tree Values Paper/newformat_21/Figures/CI_width_nolegend.png",
#       p4+ guides(col=FALSE, lty=FALSE),
#       width=16,
#       height=8,
#       units="cm")
#ggsave(filename="~/Dropbox/Tree Values Paper/newformat_v15/Figures/CI_width.png",
#       p3,
#       width=16,
#       height=10,
#       units="cm")
setwd("~/Dropbox/Tree Values Paper/Code : Other for Creating All Figures/Simulation Running Code")
