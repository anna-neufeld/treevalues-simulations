geom_line(aes(x=time,y=S,col="Susceptible"))+
labs(col="State")+ylab("Proportion of Population")+
ggtitle("Doubly infectious variant but vaccine works")+
theme(title=element_text(size=6))
p3 <- ggplot(
data=out3,aes(x=time,y=I1+A1,col="Variant 1"))+geom_line()+
geom_line(aes(x=time,y=I2+A2,col="Variant 2"))+
geom_line(aes(x=time,y=R+V,col="Immune or Vaccinated"))+
geom_line(aes(x=time,y=S,col="Susceptible"))+
labs(col="State")+ylab("Proportion of Population")+
ggtitle("Doubly infectious variant but vaccine less effective")+
theme(title=element_text(size=5))
p4 <- ggplot(
data=out4,aes(x=time,y=I1+A1,col="Variant 1"))+geom_line()+
geom_line(aes(x=time,y=I2+A2,col="Variant 2"))+
geom_line(aes(x=time,y=R+V,col="Immune or Vaccinated"))+
geom_line(aes(x=time,y=S,col="Susceptible"))+
labs(col="State")+ylab("Proportion of Population")+
ggtitle("Equally infectious variant but vaccine less effective")+
theme(title=element_text(size=6))
p1 + p2 + p3 + p4 + plot_layout(ncol = 2,guides="collect")
### scenario 4: there is a second variant. It is NOTdoubly infectious, but the vaccine doesn't work as well!!!
start4 = c(S = 0.6, V=0.2,I1 = 0.0025, I2=0.0025, A1=0.0048, A2=0.0002, R = 0.19)
prob_transmission_per_contact_2 = prob_transmission_per_contact_1
parms4 = c(
beta1I=contacts_when_sick*prob_transmission_per_contact_1,
beta2I=contacts_when_sick*prob_transmission_per_contact_2,
beta1A=asymptomatic_reduction*contacts_per_day*prob_transmission_per_contact_1,
beta2A= asymptomatic_reduction*contacts_per_day*prob_transmission_per_contact_2,
prob_symptoms_1=prob_symptoms,
prob_symptoms_2=prob_symptoms,
prob_symptoms_vacc_1 = 0.1,
prob_symptoms_vacc_2 = 0.1,
vaccination_rate=vaccination_rate,
ve1=vaccine_efficacy_1,
ve2=0.1,
gamma=gamma
)
### Assume that you want results for a 100 day period
times = seq(0,200,by = 1)
### Run each scenario!!!!
out1 = as.data.frame(ode (y = start1, times = times, func = variantmod, parms = parms1))
out2 = as.data.frame(ode (y = start2, times = times, func = variantmod, parms = parms2))
out3 = as.data.frame(ode (y = start3, times = times, func = variantmod, parms = parms3))
out4 = as.data.frame(ode (y = start4, times = times, func = variantmod, parms = parms4))
### Plot the results!!!
library(tidyverse)
library(patchwork)
p1 <- ggplot(
data=out1,aes(x=time,y=I1+A1,col="Variant 1"))+geom_line()+
geom_line(aes(x=time,y=I2+A2,col="Variant 2"))+
geom_line(aes(x=time,y=R+V,col="Immune or Vaccinated"))+
geom_line(aes(x=time,y=S,col="Susceptible"))+
labs(col="State")+ylab("Proportion of Population")+
ggtitle("One Strain Only")+
theme(title=element_text(size=6))
p2 <- ggplot(
data=out2,aes(x=time,y=I1+A1,col="Variant 1"))+geom_line()+
geom_line(aes(x=time,y=I2+A2,col="Variant 2"))+
geom_line(aes(x=time,y=R+V,col="Immune or Vaccinated"))+
geom_line(aes(x=time,y=S,col="Susceptible"))+
labs(col="State")+ylab("Proportion of Population")+
ggtitle("Doubly infectious variant but vaccine works")+
theme(title=element_text(size=6))
p3 <- ggplot(
data=out3,aes(x=time,y=I1+A1,col="Variant 1"))+geom_line()+
geom_line(aes(x=time,y=I2+A2,col="Variant 2"))+
geom_line(aes(x=time,y=R+V,col="Immune or Vaccinated"))+
geom_line(aes(x=time,y=S,col="Susceptible"))+
labs(col="State")+ylab("Proportion of Population")+
ggtitle("Doubly infectious variant but vaccine less effective")+
theme(title=element_text(size=5))
p4 <- ggplot(
data=out4,aes(x=time,y=I1+A1,col="Variant 1"))+geom_line()+
geom_line(aes(x=time,y=I2+A2,col="Variant 2"))+
geom_line(aes(x=time,y=R+V,col="Immune or Vaccinated"))+
geom_line(aes(x=time,y=S,col="Susceptible"))+
labs(col="State")+ylab("Proportion of Population")+
ggtitle("Equally infectious variant but vaccine less effective")+
theme(title=element_text(size=6))
p1 + p2 + p3 + p4 + plot_layout(ncol = 2,guides="collect")
### scenario 4: there is a second variant. It is NOTdoubly infectious, but the vaccine doesn't work as well!!!
start4 = c(S = 0.6, V=0.2,I1 = 0.0048, I2=0.0002, A1=0.0048, A2=0.0002, R = 0.19)
prob_transmission_per_contact_2 = prob_transmission_per_contact_1
parms4 = c(
beta1I=contacts_when_sick*prob_transmission_per_contact_1,
beta2I=contacts_when_sick*prob_transmission_per_contact_2,
beta1A=asymptomatic_reduction*contacts_per_day*prob_transmission_per_contact_1,
beta2A= asymptomatic_reduction*contacts_per_day*prob_transmission_per_contact_2,
prob_symptoms_1=prob_symptoms,
prob_symptoms_2=prob_symptoms,
prob_symptoms_vacc_1 = 0.1,
prob_symptoms_vacc_2 = 0.1,
vaccination_rate=vaccination_rate,
ve1=vaccine_efficacy_1,
ve2=0.1,
gamma=gamma
)
### Assume that you want results for a 100 day period
times = seq(0,200,by = 1)
### Run each scenario!!!!
out1 = as.data.frame(ode (y = start1, times = times, func = variantmod, parms = parms1))
out2 = as.data.frame(ode (y = start2, times = times, func = variantmod, parms = parms2))
out3 = as.data.frame(ode (y = start3, times = times, func = variantmod, parms = parms3))
out4 = as.data.frame(ode (y = start4, times = times, func = variantmod, parms = parms4))
### Plot the results!!!
library(tidyverse)
library(patchwork)
p1 <- ggplot(
data=out1,aes(x=time,y=I1+A1,col="Variant 1"))+geom_line()+
geom_line(aes(x=time,y=I2+A2,col="Variant 2"))+
geom_line(aes(x=time,y=R+V,col="Immune or Vaccinated"))+
geom_line(aes(x=time,y=S,col="Susceptible"))+
labs(col="State")+ylab("Proportion of Population")+
ggtitle("One Strain Only")+
theme(title=element_text(size=6))
p2 <- ggplot(
data=out2,aes(x=time,y=I1+A1,col="Variant 1"))+geom_line()+
geom_line(aes(x=time,y=I2+A2,col="Variant 2"))+
geom_line(aes(x=time,y=R+V,col="Immune or Vaccinated"))+
geom_line(aes(x=time,y=S,col="Susceptible"))+
labs(col="State")+ylab("Proportion of Population")+
ggtitle("Doubly infectious variant but vaccine works")+
theme(title=element_text(size=6))
p3 <- ggplot(
data=out3,aes(x=time,y=I1+A1,col="Variant 1"))+geom_line()+
geom_line(aes(x=time,y=I2+A2,col="Variant 2"))+
geom_line(aes(x=time,y=R+V,col="Immune or Vaccinated"))+
geom_line(aes(x=time,y=S,col="Susceptible"))+
labs(col="State")+ylab("Proportion of Population")+
ggtitle("Doubly infectious variant but vaccine less effective")+
theme(title=element_text(size=5))
p4 <- ggplot(
data=out4,aes(x=time,y=I1+A1,col="Variant 1"))+geom_line()+
geom_line(aes(x=time,y=I2+A2,col="Variant 2"))+
geom_line(aes(x=time,y=R+V,col="Immune or Vaccinated"))+
geom_line(aes(x=time,y=S,col="Susceptible"))+
labs(col="State")+ylab("Proportion of Population")+
ggtitle("Equally infectious variant but vaccine less effective")+
theme(title=element_text(size=6))
p1 + p2 + p3 + p4 + plot_layout(ncol = 2,guides="collect")
weeks <- c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat")
schoolJanuary <- c(20,200,200,200,200,200,20)
ggplot(data=NULL,aes(x=schoolJanuary))+geom_bar()
#schoolApril <- c(0,0,0,0,0,0,0,0)
library(tidyverse)
weeks <- c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat")
schoolJanuary <- c(20,200,200,200,200,200,20)
ggplot(data=NULL,aes(x=schoolJanuary))+geom_bar()
#schoolApril <- c(0,0,0,0,0,0,0,0)
?geom_bar()
weeks <- c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat")
schoolJanuary <- c(20,200,200,200,200,200,20)
ggplot(data=NULL,aes(x=schoolJanuary))+geom_col()
#schoolApril <- c(0,0,0,0,0,0,0,0)
weeks <- c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat")
schoolJanuary <- c(20,200,200,200,200,200,20)
ggplot(data=NULL,aes(x=weeks,y=schoolJanuary))+geom_col()
#schoolApril <- c(0,0,0,0,0,0,0,0)
?geom_col
weeks <- factor(c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),ordered=TRUE)
weeks
?factor
weeks <- factor(c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),
levels=c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),
ordered=TRUE)
schoolJanuary <- c(20,200,200,200,200,200,20)
ggplot(data=NULL,aes(x=weeks,y=schoolJanuary))+geom_col()
#schoolApril <- c(0,0,0,0,0,0,0,0)
weeks <- factor(c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),
levels=c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),
ordered=TRUE)
schoolJanuary <- c(20,195,202,197,203,204,30)
ggplot(data=NULL,aes(x=weeks,y=schoolJanuary))+geom_col()
#schoolApril <- c(0,0,0,0,0,0,0,0)
weeks <- factor(c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),
levels=c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),
ordered=TRUE)
schoolJanuary <- c(20,195,202,197,203,204,30)
ggplot(data=NULL,aes(x=weeks,y=schoolJanuary))+geom_col()+xlab("Day of Week")+ylab("Number of Visitors to School")
#schoolApril <- c(0,0,0,0,0,0,0,0)
weeks <- factor(c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),
levels=c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),
ordered=TRUE)
schoolMay <- c(18,35,40,33,32,37,20)
ggplot(data=NULL,aes(x=weeks,y=schoolMay))+geom_col()+xlab("Day of Week")+ylab("Number of Visitors to School")+ggtitle("May 2020")
percentChange = (schoolMay-schoolJanuary)/schoolJanuary
percentChange
percentChange = (schoolMay-schoolJanuary)/schoolJanuary
weeks <- factor(c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),
levels=c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),
ordered=TRUE)
ggplot(data=NULL,aes(x=weeks,y=percentChange))+geom_col()+xlab("Day of Week")+ylab("Percent Change in Visitors to School")+ggtitle("May 2020")
percentChange = (schoolMay-schoolJanuary)/schoolJanuary
weeks <- factor(c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),
levels=c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),
ordered=TRUE)
ggplot(data=NULL,aes(x=weeks,y=percentChange,col=weeks))+geom_col()+xlab("Day of Week")+ylab("Percent Change in Visitors to School")+ggtitle("May 2020")
percentChange = (schoolMay-schoolJanuary)/schoolJanuary
weeks <- factor(c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),
levels=c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),
ordered=TRUE)
ggplot(data=NULL,aes(x=weeks,y=percentChange,fill=weeks))+geom_col()+xlab("Day of Week")+ylab("Percent Change in Visitors to School")+ggtitle("May 2020")+guides(col=FALSE)
percentChange = (schoolMay-schoolJanuary)/schoolJanuary
weeks <- factor(c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),
levels=c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),
ordered=TRUE)
ggplot(data=NULL,aes(x=weeks,y=percentChange,fill=weeks))+geom_col()+xlab("Day of Week")+ylab("Percent Change in Visitors to School")+ggtitle("May 2020")+guides(fill=FALSE)
weeks <- factor(c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),
levels=c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat"),
ordered=TRUE)
schoolJanuary <- c(20,195,202,197,203,204,30)
ggplot(data=NULL,aes(x=weeks,y=schoolJanuary,fill=weeks))+geom_col()+xlab("Day of Week")+ylab("Number of Visitors to School")+ggtitle("January 2020")+guides(fill=FALSE)+ylim(0,250)
source('~/newDisease/DiseaseSimulation/Final_Project.R', echo=TRUE)
shiny::runApp('newDisease/DiseaseSimulation')
input$n.roommates <- 3
input$n.workers <- 5
input$n.people <- 200
input$pct.starting.infected <- 0.1
input$max.time <- 100
input$pparty <- 0.5
input$pmask  <- 0.1
input$partyDay <- 8
input$random_seed <- 17
source("Final_Project.R")
input <- list()
input$n.roommates <- 3
input$n.workers <- 5
input$n.people <- 200
input$pct.starting.infected <- 0.1
input$max.time <- 100
input$pparty <- 0.5
input$pmask  <- 0.1
input$partyDay <- 8
input$random_seed <- 17
distribution_graph <- initiateNet(input$n.roommates, input$n.workers, input$n.people,input$random_seed)
#plot(distribution_graph)
l <- layout.fruchterman.reingold(distribution_graph, niter=1000)
plot(distribution_graph, layout=l,
edge.arrow.size=0.5,
vertex.label.cex=0.1,
vertex.label.family="Helvetica",
vertex.label.font=0.5,
vertex.shape="circle",
vertex.size=1,
vertex.label.color="black",
edge.width=1)
distribution_graph <- initiateNet(input$n.roommates, input$n.workers, input$n.people,input$random_seed)
fullResults <- simulateDisease(distribution_graph, input$pct.starting.infected, input$max.time, input$pparty, input$pmask,
FALSE,
input$partyDay, input$n.people, input$n.roommates,input$random_seed)
fullResults_party <- simulateDisease(distribution_graph, input$pct.starting.infected, input$max.time, input$pparty, input$pmask,
TRUE,
input$partyDay, input$n.people, input$n.roommates,input$random_seed)
runApp('newDisease/DiseaseSimulation')
?rpart
??rpart
library(rpart)
?rpart
library(splines)
X
X <- runif(100)
bs(X,df=6)
dim(bs(X,df=6))
tr(dim(bs(X,df=6)))
trace(bs(X,df=6)))
trace(bs(X,df=6))
sum(diag(bs(X,df=6)))
sum(diag(bs(X,df=6,intercept=TRUE)))
M <- bs(X,df=6,intercept=TRUE))
M <- bs(X,df=6,intercept=TRUE)
M%*%solve(t(M)%*%M)%*%t(M)
sum(diag(M%*%solve(t(M)%*%M)%*%t(M)))
M <- bs(X,df=6,intercept=TRUE)
M <- bs(X,df=6)
sum(diag(M%*%solve(t(M)%*%M)%*%t(M)))
?ctree
library(partykit)
?ctree
library(rpart)
library(intervals)
library(partykit)
library(tidyverse)
library(gridExtra)
library(knitr)
setwd("~/Dropbox/Tree Values Paper/Code : Other for Creating All Figures")
nullRes <- read.csv("null_res_1-18-2021-5000.csv", sep=" ", header=FALSE)
names(nullRes) <- c("cp", "seed", "method", "type", "depth", "pval", "n1", "n2", "sampsig", "NA")
head(nullRes)
res<- read.csv("Full_Rand_Comps_1-18-2021-maxdepth3.csv", header=FALSE,sep=" ")
names(res)<- c("cp", "seed", "depth", "beta", "method", "pval", "truesig",
"n1", "n2", "samplesig", "bestRand", "whichSplit","XORlev", "best", "NA")
res %>% group_by(method) %>% summarize(max(pval))
res %>% group_by(method) %>% summarize(max(pval, na.rm=TRUE))
hist((res %>% filter(method=="ctree"))$pval
)
?hst
?ctree
i=1
set.seed(i)
n <- 200
p <- 10
X <- MASS::mvrnorm(n, rep(0,p), diag(rep(1,p)))
mu_y <- 0
sigma_y <- 5
y <- rnorm(n,mu_y,sigma_y)
# This helps read the split rules
dat <- data.frame(y=y,X=X)
nameX <- sapply(1:p, function(u) paste0("X",u))
names(dat) = c("y", nameX)
ctree(y~., data=dat, control=ctree_control(maxdepth=1))
length(ctree(y~., data=dat, control=ctree_control(minbucket = minbucket,
maxdepth=maxdepth,
alpha=alpha)))
length(ctree(y~., data=dat, control=ctree_control(minbucket = minbucket,
maxdepth=maxdepth,
alpha=0.05)))
length(ctree(y~., data=dat, control=ctree_control(
maxdepth=maxdepth,
alpha=0.05)))
length(ctree(y~., data=dat, control=ctree_control(
maxdepth=1,
alpha=0.05)))
length(ctree(y~., data=dat, control=ctree_control(
maxdepth=5,
alpha=0.001)))
length(ctree(y~., data=dat, control=ctree_control(
maxdepth=5,
alpha=0.5)))
ctree(y~., data=dat)
ctree(y~X)
library(partykit)
n <- 200
p <- 10
mu_y <- 0
sigma_y <- 5
type1default <- 0
type1bonferroni <- 0
for (i in 1:1000) {
set.seed(i)
X <- MASS::mvrnorm(n, rep(0,p), diag(rep(1,p)))
y <- rnorm(n,mu_y,sigma_y)
dat <- data.frame(y=y,X=X)
nameX <- sapply(1:p, function(u) paste0("X",u))
names(dat) = c("y", nameX)
if (length(ctree(y~., data=dat)) > 1) {
type1 <- type1+1
}
if (length(ctree(y~., data=dat, testtype="Bonferroni")) > 1) {
type1bonferroni <- type1bonferroni+1
}
}
type1default <- 0
type1bonferroni <- 0
for (i in 1:1000) {
set.seed(i)
X <- MASS::mvrnorm(n, rep(0,p), diag(rep(1,p)))
y <- rnorm(n,mu_y,sigma_y)
dat <- data.frame(y=y,X=X)
nameX <- sapply(1:p, function(u) paste0("X",u))
names(dat) = c("y", nameX)
if (length(ctree(y~., data=dat)) > 1) {
type1default <- type1default+1
}
if (length(ctree(y~., data=dat, testtype="Bonferroni")) > 1) {
type1bonferroni <- type1bonferroni+1
}
}
type1default
type1bonferroni
type1default <- 0
type1bonferroni <- 0
nTrials <- 10000
for (i in 1:nTrials) {
set.seed(i)
X <- MASS::mvrnorm(n, rep(0,p), diag(rep(1,p)))
y <- rnorm(n,mu_y,sigma_y)
dat <- data.frame(y=y,X=X)
nameX <- sapply(1:p, function(u) paste0("X",u))
names(dat) = c("y", nameX)
if (length(ctree(y~., data=dat)) > 1) {
type1default <- type1default+1
}
if (length(ctree(y~., data=dat, testtype="Bonferroni")) > 1) {
type1bonferroni <- type1bonferroni+1
}
if (length(ctree(y~., data=dat, testtype="Univariate")) > 1) {
type1bonferroni <- type1bonferroni+1
}
}
library(partykit)
type1default <- 0
type1bonferroni <- 0
type1univariate  <- 0
nTrials <- 5000
for (i in 1:nTrials) {
set.seed(i)
X <- MASS::mvrnorm(n, rep(0,p), diag(rep(1,p)))
y <- rnorm(n,mu_y,sigma_y)
dat <- data.frame(y=y,X=X)
nameX <- sapply(1:p, function(u) paste0("X",u))
names(dat) = c("y", nameX)
if (length(ctree(y~., data=dat)) > 1) {
type1default <- type1default+1
}
if (length(ctree(y~., data=dat, testtype="Bonferroni")) > 1) {
type1bonferroni <- type1bonferroni+1
}
if (length(ctree(y~., data=dat, testtype="Univariate")) > 1) {
type1univariate <-   type1univariate +1
}
}
type1default/nTrials
type1bonferroni/nTrials
type1default/nTrials
type1bonferroni/nTrials
type1univariate/nTrials
length(ctree(y~., data=dat)
)
(ctree(y~., data=dat)
)$
)
i=5
print(i)
set.seed(i)
X <- MASS::mvrnorm(n, rep(0,p), diag(rep(1,p)))
y <- rnorm(n,mu_y,sigma_y)
dat <- data.frame(y=y,X=X)
nameX <- sapply(1:p, function(u) paste0("X",u))
names(dat) = c("y", nameX)
length(ctree(y~., data=dat)
)
ctree(y~., data=dat)
nodeapply(ctree(y~., data=dat), function(n) info_node(n)$p.value))
nodeapply(ctree(y~., data=dat), function(n) info_node(n)$p.value)
namesctree(y~., data=dat)()
names(ctree(y~., data=dat))
names(ctree(y~., data=dat, testtype="Univariate"))
set.seed(6)
print(i)
set.seed(i)
X <- MASS::mvrnorm(n, rep(0,p), diag(rep(1,p)))
y <- rnorm(n,mu_y,sigma_y)
dat <- data.frame(y=y,X=X)
nameX <- sapply(1:p, function(u) paste0("X",u))
names(dat) = c("y", nameX)
names(ctree(y~., data=dat, testtype="Univariate"))
u=7
i=7
print(i)
set.seed(i)
X <- MASS::mvrnorm(n, rep(0,p), diag(rep(1,p)))
y <- rnorm(n,mu_y,sigma_y)
dat <- data.frame(y=y,X=X)
nameX <- sapply(1:p, function(u) paste0("X",u))
names(dat) = c("y", nameX)
names(ctree(y~., data=dat, testtype="Univariate"))
for (i in 1:nTrials) {
print(i)
set.seed(i)
X <- MASS::mvrnorm(n, rep(0,p), diag(rep(1,p)))
y <- rnorm(n,mu_y,sigma_y)
dat <- data.frame(y=y,X=X)
nameX <- sapply(1:p, function(u) paste0("X",u))
names(dat) = c("y", nameX)
if (length(ctree(y~., data=dat)) > 1) {
type1default <- type1default+1
as.numeric(nodeapply(Ctree, ids =node, function(n) info_node(n)$p.value))
}
if (length(ctree(y~., data=dat, testtype="Bonferroni")) > 1) {
type1bonferroni <- type1bonferroni+1
}
if (length(ctree(y~., data=dat, testtype="Univariate")) > 1) {
print(names(ctree(y~., data=dat, testtype="Univariate")))
type1univariate <-   type1univariate +1
}
}
tree <- ctree(y~., data=dat, testtype="Univariate")
nodes <- names(tree)
pvals <- nodeapply(tree, ids =node, function(n) info_node(n)$p.value)
tree <- ctree(y~., data=dat, testtype="Univariate")
nodes <- names(tree)
pvals <- nodeapply(tree, ids =nodes, function(n) info_node(n)$p.value)
tree
nodes
tree
as.numeric(nodes)
pvals <- nodeapply(tree, ids =as.numeric(nodes), function(n) info_node(n)$p.value)
pvals
ctree(y~., data=dat, testtype="Bonferroni")
ctree(y~., data=dat, testtype="Bonferroni",alpha=0.01)
nodeapply(ctree(y~., data=dat, testtype="Bonferroni",alpha=0.01),ids=1,function(n) info_node(n)$p.value)
source('~/Dropbox/Tree Values Paper/Code : Other for Creating All Figures/Untitled.R', echo=TRUE)
pvals_default
source('~/Dropbox/Tree Values Paper/Code : Other for Creating All Figures/Untitled.R', echo=TRUE)
all.equal(pvals_bonferroni,pvals_default)
par(mfrow(c(2,2)))
par(mfrow=c(2,2))
hist(pvals_bonferroni)
hist(pvals_univariate)
hist(pvals_bonferron_split[!is.na(pvals_bonferroni_split)])
hist(pvals_bonferroni_split[!is.na(pvals_bonferroni_split)])
hist(pvals_univariate_split[!is.na(pvals_univariate_split)])
max(pvals_bonferroni_split)
max(pvals_univariate_split)
par(mfrow=c(2,2))
hist(pvals_bonferroni)
hist(pvals_univariate)
hist(pvals_bonferroni_split[!is.na(pvals_bonferroni_split)])
hist(pvals_univariate_split[!is.na(pvals_univariate_split)])
max(pvals_bonferroni_split, na.rm=TRUE)
max(pvals_univariate_split, na.rm=TRUE)
