countern = countern+1
}
counterc=counterc+1
countern = 1
}
rownames(power2) <- ns
colnames(power2) <- cs
power2
ns <- seq(20,40,by=1)
cs <- c(3,4,5)
mu=0
alpha=0.05
nTrials = 10000
countern= 1
counterc= 1
power2 = matrix(NA, nrow=length(ns), ncol=length(cs))
for (c in cs) {
print(c)
for (n in ns) {
print(n)
pvals <- rep(0, nTrials)
for (i in 1:nTrials) {
treatment <- rnorm(n,mean=9,sd=8)
control <- rnorm(n,mean=c,sd=6)
pvals[i] <- as.numeric(
t.test(treatment, control,mu=margin, alternative="greater")$p.value < alpha)
}
power2[countern, counterc] <- mean(pvals)
countern = countern+1
}
counterc=counterc+1
countern = 1
}
rownames(power2) <- ns
colnames(power2) <- cs
power2
26*3
40*3
ns <- seq(15,80,by=1)
cs <- c(3,4,5)
mu=0
alpha=0.05
nTrials = 10000
countern= 1
counterc= 1
power2 = matrix(NA, nrow=length(ns), ncol=length(cs))
for (c in cs) {
print(c)
for (n in ns) {
print(n)
pvals <- rep(0, nTrials)
for (i in 1:nTrials) {
treatment <- rnorm(n,mean=9,sd=8)
control <- rnorm(n,mean=c,sd=6)
pvals[i] <- as.numeric(
t.test(treatment, control,mu=margin, alternative="greater")$p.value < alpha)
}
power2[countern, counterc] <- mean(pvals)
countern = countern+1
}
counterc=counterc+1
countern = 1
}
rownames(power2) <- ns
colnames(power2) <- cs
power2
47*2
ns <- seq(10,40,by=1)
cs <- c(3,4,5)
mu=0
alpha=0.05
nTrials = 10000
countern= 1
counterc= 1
power2 = matrix(NA, nrow=length(ns), ncol=length(cs))
for (c in cs) {
print(c)
for (n in ns) {
print(n)
pvals <- rep(0, nTrials)
for (i in 1:nTrials) {
treatment <- rnorm(2*n,mean=9,sd=8)
control <- rnorm(n,mean=c,sd=6)
pvals[i] <- as.numeric(
t.test(treatment, control,mu=margin, alternative="greater")$p.value < alpha)
}
power2[countern, counterc] <- mean(pvals)
countern = countern+1
}
counterc=counterc+1
countern = 1
}
rownames(power2) <- ns
colnames(power2) <- cs
power2
18*3
27*3
32*3
24*3
38*3
devtools::install_github('cole-trapnell-lab/leidenbase')
devtools::install_github('cole-trapnell-lab/leidenbase')
157/350
curve((1-(1-x)^(10), xlim=c(0,1))
curve(1-(1-x)^(10), xlim=c(0,1))
lapply(seq(0,1,by=100), function(x) 1-(1-x)^(10))
sapply(seq(0,1,by=100), function(x) 1-(1-x)^(10))
sapply(seq(0,1,lenght.out=100), function(x) 1-(1-x)^(10))
sapply(seq(0,1,length.out=100), function(x) 1-(1-x)^(10))
seq(0,1,length.out=100)
(0.95)^10
(0.96)^10
(0.945)^10
(350-157)
(350-157)/350
350-157
treatment_null <- rnorm(30,mean=0, sd=1)
control  <- rnorm(30,mean=0, sd=1)
treatment_non_null <- rnorm(30,mean=5, sd=1)
t.test(treatment_null~control)$p.value
t.test(treatment_null, control)$p.value
ifelse(7>5,"red","blue")
x <- 14
ifelse(x>10, "true", "false")
ifelse(x>10, "x=5true", "false")
ifelse(x>10, "true", "false")
x=5
ifelse(x>10, "true", "false")
nTrials <- 10000
pvals_all_null <- rep(0,nTrials)
pvals_half_null <- rep(0,nTrials)
pvals_no_null <- rep(0,nTrials)
for (i in 1:nTrials) {
treatment_null <- rnorm(30,mean=0, sd=1)
control  <- rnorm(30,mean=0, sd=1)
treatment_non_null <- rnorm(30,mean=5, sd=1)
pvals_all_null[i] <- t.test(treatment_null, control)$p.value
pvals_no_nuull[i] <- t.test(treatment_non_null, control)$p.value
pvals_half_null[i] <- ifelse(i > nTrials/2, pvals_all_null[i], pvals_no_null[i])
}
for (i in 1:nTrials) {
treatment_null <- rnorm(30,mean=0, sd=1)
control  <- rnorm(30,mean=0, sd=1)
treatment_non_null <- rnorm(30,mean=5, sd=1)
pvals_all_null[i] <- t.test(treatment_null, control)$p.value
pvals_no_null[i] <- t.test(treatment_non_null, control)$p.value
pvals_half_null[i] <- ifelse(i > nTrials/2, pvals_all_null[i], pvals_no_null[i])
}
par(mfrow=c(3,1))
hist(pvals_all_null)
hist(pvals_no_null)
hist(pvals_half_null)
qnorm(0.025)
qnorm(0.975)
library(readxl)
library(tidyverse)
dat <- read_excel("~/Dropbox/ADAP/Study 5_Anna Collab .xlsx")
names(dat) <- c("mouse", "pos", "cond", "rep", "volC", "saC", "lengthC", "volT", "saT", "lengthT")
dat <- dat %>% mutate(row = floor((pos-1)/7)+1, col=((pos+6)%%7))
dat$cond2 <- ordered(dat$cond, levels= c("Control","2% gelMA", "3% gelMA", "5% gelMA", "7% gelMA", "10% gelMA",
"12% gelMA", "15% gelMA", "20% gelMA",
"2% gelMA + NHDFs", "3% gelMA + NHDFs", "5% gelMA + NHDFs", "7% gelMA + NHDFs", "10% gelMA + NHDFs",
"12% gelMA + NHDFs", "15% gelMA + NHDFs", "20% gelMA + NHDFs",
"Collagen", "Collagen + NHDFs", "Matrigel", "Matrigel + NHDFs"))
dat <- dat %>% mutate(saT = as.numeric(saT), volT=as.numeric(volT), lengthT = as.numeric(lengthT))
dat <- dat %>% mutate(summy = volC+saC+lengthC+volT+saT+lengthT, summyC = volC+saC+lengthC, summyT = volT+saT+lengthT)
dat <- dat %>% mutate(coldist = abs(col-3))
allconds <- sort(unique(dat$cond2))
is.gelMA.nonNHDFs <- allconds[2:9]
is.gelMA.NHDFs <- allconds[10:17]
is.gelMA <- c(is.gelMA.nonNHDFs, is.gelMA.NHDFs)
is.NHDFs <- allconds[c(10:17,19,21)]
is.Collagen <- allconds[c(18,19)]
is.Matrigel <- allconds[c(20,21)]
dat <- dat %>% mutate(vesselC = as.factor(summyC > 0), vesselT = as.factor(summyT > 0))
dat <- dat %>% mutate(is.gelMA = dat$cond2 %in% is.gelMA,
is.NHDFs = dat$cond2 %in% is.NHDFs,
is.Collagen = dat$cond2 %in% is.Collagen,
is.Matrigel = dat$cond2 %in% is.Matrigel)
dat$pct.gelMA = 0
dat$pct.gelMA[dat$cond2=="2% gelMA" | dat$cond2=="2% gelMA + NHDFs"] = 2
dat$pct.gelMA[dat$cond2=="3% gelMA" | dat$cond2=="3% gelMA + NHDFs"] = 3
dat$pct.gelMA[dat$cond2=="5% gelMA" | dat$cond2=="5% gelMA + NHDFs"] = 5
dat$pct.gelMA[dat$cond2=="7% gelMA" | dat$cond2=="7% gelMA + NHDFs"] = 7
dat$pct.gelMA[dat$cond2=="10% gelMA" | dat$cond2=="10% gelMA + NHDFs"] = 10
dat$pct.gelMA[dat$cond2=="12% gelMA" | dat$cond2=="12% gelMA + NHDFs"] = 12
dat$pct.gelMA[dat$cond2=="15% gelMA" | dat$cond2=="15% gelMA + NHDFs"] = 15
dat$pct.gelMA[dat$cond2=="20% gelMA" | dat$cond2=="20% gelMA + NHDFs"] = 20
sandwichPs <- function(mod, indices=9:(9+20)) {
res <- lmtest::coeftest(mod, vcov. = sandwich::vcovHC(mod))
return(res[indices,c(1,2,4)])
}
dat$pct.gelMA2 <- dat$pct.gelMA
dat$pct.gelMA2[dat$cond2 %in% is.NHDFs] <- 0
dat$pct.gelMA.N <- dat$pct.gelMA
dat$pct.gelMA.N[!(dat$cond2 %in% is.NHDFs)] <- 0
modVolC <- lm(log10(volC+1)~as.factor(mouse)+row+coldist+
is.gelMA+
pct.gelMA+
is.Collagen+
is.Matrigel+
is.NHDFs, data=dat)
mouseResids <- lm(log10(volC+1)~as.factor(mouse), data=dat)$residuals
mouseResids
mouseResids <- lm(log10(volC+1)~as.factor(mouse), data=dat)$residuals
summary(lm(mouseResids~row+coldist+
is.gelMA+
pct.gelMA+
is.Collagen+
is.Matrigel+
is.NHDFs, data=dat))
summary(modVolC)
summary(modVolC)$coefficients[9:12,1]
summary(lm(mouseResids~row+coldist+
+           is.gelMA+
+           pct.gelMA+
+           is.Collagen+
+           is.Matrigel+
+           is.NHDFs, data=dat))
combinat::permn(c(1:5))
head(combinat::permn(c(1:5)),20)
head(combinat::permn(c(1:3)))
library(tidyverse)
library(gridExtra)
library(patchwork)
setwd("~/Dropbox/Tree Values Paper/Code Reviewer Response/unknown variance")
res <- read.csv("non_null_var_est_4-5-2022.csv", header=FALSE, sep=" ")
names(res) <- c("beta", "XORLev", "cp", "seed", "method", "type", "depth",
"pval", "pval_cons", "pval_SSE", "pval_MAD", "pval_MED",
"lower", "upper",  "lower_cons", "upper_cons",  "lower_SSE", "upper_SSE",  "lower_MAD", "upper_MAD",  "lower_MED", "upper_MED",
"n1", "n2", "sampsig","truesig", "truesigtest", "sizeS", "sizeNum")
res <- res %>% mutate(correctCI = lower < truesig & upper > truesig,
correctCI_cons= lower_cons < truesig & upper_cons > truesig,
correctCI_SSE= lower_SSE < truesig & upper_SSE > truesig,
correctCI_mad= lower_MAD < truesig & upper_MAD > truesig,
correctCI_med= lower_MED < truesig & upper_MED > truesig,
length = upper - lower,
length_cons = upper_cons-lower_cons,
length_SSE = upper_SSE-lower_SSE)
###  TABLE 2 !!!
res %>% group_by(method, type, depth) %>% summarize("Known" = round(mean(correctCI, na.rm=TRUE),3),
"Cons" = round(mean(correctCI_cons, na.rm=TRUE),3),
"SSE" = round(mean(correctCI_SSE, na.rm=TRUE),3),
"MAD" = round(mean(correctCI_mad, na.rm=TRUE),3),
"MED" = round(mean(correctCI_med, na.rm=TRUE),3))
setwd("~/Dropbox/Tree Values Paper/Code Reviewer Response/unknown variance")
library(tidyverse)
library(gridExtra)
setwd("~/Dropbox/Tree Values Paper/Code Reviewer Response")
setwd("~/Dropbox/Tree Values Paper/Code Reviewer Response/unknown variance/")
nullRes <- read.csv("null_res_var_est.csv", sep=" ", header=FALSE)
names(nullRes) <- c("cp", "seed", "method", "type", "depth", "pval", "n1", "n2", "sampsig", "NA")
ggplot(data=nullRes, aes(sample=pval, col=method))+
geom_qq(distribution="qunif")+
facet_grid(vars(depth))+
geom_abline(slope=1, intercept=0)
n <- 200
p <-10
sigma_y <- 5
nTrials <- 1000
X <- MASS::mvrnorm(n, rep(0,p), diag(rep(1,p)))
y <- rnorm(n, 0, sigma_y)
dat <- data.frame(y=y,X=X)
nameX <- sapply(1:p, function(u) paste0("X",u))
names(dat) = c("y", nameX)
cp = 200/sum((y-mean(y))^2)
base_tree <- rpart::rpart(y~., data=dat,
control=rpart.control(minbucket=1,cp=cp, maxcompete=0,maxsurrogate=0, maxdepth=3), model=TRUE)
library(rpart)
base_tree <- rpart::rpart(y~., data=dat,
control=rpart.control(minbucket=1,cp=cp, maxcompete=0,maxsurrogate=0, maxdepth=3), model=TRUE)
sigma_y
sd(y)
sqrt(sum((y-predict(base_tree))^2/(n-length(unique(base_tree$where)))))
length(unique(base_tree$where))
sqrt(median((y - median(y))^2)/qchisq(0.5, df=1))
median(abs(y - median(y)))
mean(abs(y - mean(y)))
sqrt(mean(abs(y - mean(y))^2))
abs(y - median(y))
nullRes <- nullRes %>% filter(method != "mad")
ggplot(data=nullRes, aes(sample=pval, col=method))+
geom_qq(distribution="qunif")+
facet_grid(vars(depth))+
geom_abline(slope=1, intercept=0)
ggplot(data=nullRes, aes(sample=pval, col=method))+
geom_qq(distribution="qunif")+
facet_grid(cols=vars(depth))+
geom_abline(slope=1, intercept=0)
ggplot(data=nullRes, aes(sample=pval, col=method))+
geom_qq(distribution="qunif")+
facet_grid(cols=vars(depth))+
geom_abline(slope=1, intercept=0)+coord_fixed()+theme_bw()
ggplot(data=nullRes, aes(sample=pval, col=method))+
geom_qq(distribution="qunif")+
facet_grid(cols=vars(depth))+
geom_abline(slope=1, intercept=0)+coord_fixed()+theme_bw()+ggtitle(expression(sigma[cons]))
nullRes$method[nullRes$method=="cons"] = expression(sigma[cons])
nullRes$method[nullRes$method=="known"] = expression(sigma)
ggplot(data=nullRes, aes(sample=pval, col=method))+
geom_qq(distribution="qunif")+
facet_grid(cols=vars(depth))+
geom_abline(slope=1, intercept=0)+coord_fixed()+theme_bw()+
xlab("Unif(0,1) Quantiles")+ylab("Sample Quantiles")+
labs(col="Variance estimate:")
nullRes <- nullRes %>% filter(method != "mad")
setwd("~/Dropbox/Tree Values Paper/Code Reviewer Response/unknown variance/")
nullRes <- read.csv("null_res_var_est.csv", sep=" ", header=FALSE)
names(nullRes) <- c("cp", "seed", "method", "type", "depth", "pval", "n1", "n2", "sampsig", "NA")
nullRes <- nullRes %>% filter(method != "mad")
nullRes$method[nullRes$method=="cons"] = expression(sigma[cons])
#nullRes$method[nullRes$method=="known"] = expression(sigma)
ggplot(data=nullRes, aes(sample=pval, col=method))+
geom_qq(distribution="qunif")+
facet_grid(cols=vars(depth))+
geom_abline(slope=1, intercept=0)+coord_fixed()+theme_bw()+
xlab("Unif(0,1) Quantiles")+ylab("Sample Quantiles")+
labs(col="Variance estimate:")
setwd("~/Dropbox/Tree Values Paper/Code Reviewer Response/unknown variance/")
nullRes <- read.csv("null_res_var_est.csv", sep=" ", header=FALSE)
names(nullRes) <- c("cp", "seed", "method", "type", "depth", "pval", "n1", "n2", "sampsig", "NA")
nullRes <- nullRes %>% filter(method != "mad")
#nullRes$method[nullRes$method=="cons"] = expression(sigma[cons])
#nullRes$method[nullRes$method=="known"] = expression(sigma)
ggplot(data=nullRes, aes(sample=pval, col=method))+
geom_qq(distribution="qunif")+
facet_grid(cols=vars(depth))+
geom_abline(slope=1, intercept=0)+coord_fixed()+theme_bw()+
xlab("Unif(0,1) Quantiles")+ylab("Sample Quantiles")+
labs(col="Variance estimate:")
nullRes$method = ordered(nullRes$method, levels=c("known", "cons",
"SSE", "med_yc"))
#nullRes$method[nullRes$method=="cons"] = expression(sigma[cons])
#nullRes$method[nullRes$method=="known"] = expression(sigma)
ggplot(data=nullRes, aes(sample=pval, col=method))+
geom_qq(distribution="qunif")+
facet_grid(cols=vars(depth))+
geom_abline(slope=1, intercept=0)+coord_fixed()+theme_bw()+
xlab("Unif(0,1) Quantiles")+ylab("Sample Quantiles")+
labs(col="Variance estimate:")
?scale_color_discrete
#nullRes$method[nullRes$method=="cons"] = expression(sigma[cons])
#nullRes$method[nullRes$method=="known"] = expression(sigma)
ggplot(data=nullRes, aes(sample=pval, col=method))+
geom_qq(distribution="qunif")+
facet_grid(cols=vars(depth))+
geom_abline(slope=1, intercept=0)+coord_fixed()+theme_bw()+
xlab("Unif(0,1) Quantiles")+ylab("Sample Quantiles")+
labs(col="Variance estimate:")+
scale_color_discrete(labels=c(expression(sigma), "cons", "SSE", "med"))
#nullRes$method[nullRes$method=="cons"] = expression(sigma[cons])
#nullRes$method[nullRes$method=="known"] = expression(sigma)
ggplot(data=nullRes, aes(sample=pval, col=method))+
geom_qq(distribution="qunif")+
facet_grid(cols=vars(depth))+
geom_abline(slope=1, intercept=0)+coord_fixed()+theme_bw()+
xlab("Unif(0,1) Quantiles")+ylab("Sample Quantiles")+
labs(col="Variance estimate:")+
scale_color_discrete(labels=c(expression(sigma), "expression(sigma[cons])", "expression(sigma[SSE])", "expression(sigma[med])"))
#nullRes$method[nullRes$method=="cons"] = expression(sigma[cons])
#nullRes$method[nullRes$method=="known"] = expression(sigma)
ggplot(data=nullRes, aes(sample=pval, col=method))+
geom_qq(distribution="qunif")+
facet_grid(cols=vars(depth))+
geom_abline(slope=1, intercept=0)+coord_fixed()+theme_bw()+
xlab("Unif(0,1) Quantiles")+ylab("Sample Quantiles")+
labs(col="Variance estimate:")+
scale_color_discrete(labels=c(expression(sigma), expression(sigma[cons]), expression(sigma[SSE]), expression(sigma[med])))
#nullRes$method[nullRes$method=="cons"] = expression(sigma[cons])
#nullRes$method[nullRes$method=="known"] = expression(sigma)
ggplot(data=nullRes, aes(sample=pval, col=method))+
geom_qq(distribution="qunif")+
facet_grid(cols=vars(depth))+
geom_abline(slope=1, intercept=0)+coord_fixed()+theme_bw()+
xlab("Unif(0,1) Quantiles")+ylab("Sample Quantiles")+
labs(col="Variance estimate:")+
scale_color_discrete(labels=c(expression(sigma), expression(hat(sigma)[cons]), expression(hat(sigma)[SSE]), expression(hat(sigma)[med])))
ggsave("~/Dropbox/Tree Values Paper/JMLR Reviewer Responses/global_null_fig.png")
ggsave("~/Dropbox/Tree Values Paper/JMLR Reviewer Responses/global_null_fig.png",
width=8, height=4)
setwd("~/Dropbox/Tree Values Paper/Code Reviewer Response/unknown variance")
res <- read.csv("non_null_var_est_4-5-2022.csv", header=FALSE, sep=" ")
names(res) <- c("beta", "XORLev", "cp", "seed", "method", "type", "depth",
"pval", "pval_cons", "pval_SSE", "pval_MAD", "pval_MED",
"lower", "upper",  "lower_cons", "upper_cons",  "lower_SSE", "upper_SSE",  "lower_MAD", "upper_MAD",  "lower_MED", "upper_MED",
"n1", "n2", "sampsig","truesig", "truesigtest", "sizeS", "sizeNum")
res <- res %>% mutate(correctCI = lower < truesig & upper > truesig,
correctCI_cons= lower_cons < truesig & upper_cons > truesig,
correctCI_SSE= lower_SSE < truesig & upper_SSE > truesig,
correctCI_mad= lower_MAD < truesig & upper_MAD > truesig,
correctCI_med= lower_MED < truesig & upper_MED > truesig,
length = upper - lower,
length_cons = upper_cons-lower_cons,
length_SSE = upper_SSE-lower_SSE)
###  TABLE 2 !!!
res %>% group_by(method, type, depth) %>% summarize("Known" = round(mean(correctCI, na.rm=TRUE),3),
"Cons" = round(mean(correctCI_cons, na.rm=TRUE),3),
"SSE" = round(mean(correctCI_SSE, na.rm=TRUE),3),
"MAD" = round(mean(correctCI_mad, na.rm=TRUE),3),
"MED" = round(mean(correctCI_med, na.rm=TRUE),3))
###  TABLE 2 !!!
res %>% group_by(method, type, depth) %>% summarize("Known" = round(mean(correctCI, na.rm=TRUE),3),
"Cons" = round(mean(correctCI_cons, na.rm=TRUE),3),
"SSE" = round(mean(correctCI_SSE, na.rm=TRUE),3),
"MED" = round(mean(correctCI_med, na.rm=TRUE),3))
###  TABLE 2 !!!
res %>% group_by(method, type, depth) %>% summarize("Known" = round(mean(correctCI, na.rm=TRUE),3),
"Cons" = round(mean(correctCI_cons, na.rm=TRUE),3),
"SSE" = round(mean(correctCI_SSE, na.rm=TRUE),3),
"MED" = round(mean(correctCI_med, na.rm=TRUE),3))
ggplot(data=res %>% filter(truesig==0))+
geom_qq(aes(sample=pval, col="Known"), distribution="qunif")+
geom_qq(aes(sample=pval_cons, col="Conservative"), distribution="qunif")+
geom_qq(aes(sample=pval_SSE, col="SSE"), distribution="qunif")+
geom_qq(aes(sample=pval_MAD, col="MAD"), distribution="qunif")+
geom_qq(aes(sample=pval_MED, col="MED"), distribution="qunif")+
geom_abline(slope=1,intercept=0)+theme_bw()+
xlab("Unif(0,1) Quantiles")+ylab("Sample Quantiles")+
facet_grid(vars(depth))
n=1000
p=10
depth=3
y <- rnorm(n)
X <- matrix(rnorm(n*p), nrow=n)
tree <- rpart(y~X, control=rpart.control(maxdepth=3))
sd = sqrt(1/(length(unique(tree$where)))*sum((y-predict(tree))^2))
sqrt(1/(length(unique(tree$where)))*sum((y-predict(tree))^2))
n=1000
p=10
depth=3
y <- rnorm(n)
X <- matrix(rnorm(n*p), nrow=n)
tree <- rpart(y~X, control=rpart.control(maxdepth=3))
sqrt(1/(n-length(unique(tree$where)))*sum((y-predict(tree))^2))
n=1000
p=10
depth=3
sds = rep(0, nTrials)
nTrials = 1000
for (i in 1:nTrials) {
y <- rnorm(n)
X <- matrix(rnorm(n*p), nrow=n)
tree <- rpart(y~X, control=rpart.control(maxdepth=3))
sds[i] <- sqrt(1/(n-length(unique(tree$where)))*sum((y-predict(tree))^2))
}
mean(sds)
hist(sds)
n=1000
p=10
depth=10
sds = rep(0, nTrials)
nTrials = 1000
for (i in 1:nTrials) {
print(i)
y <- rnorm(n)
X <- matrix(rnorm(n*p), nrow=n)
tree <- rpart(y~X, control=rpart.control(maxdepth=3))
sds[i] <- sqrt(1/(n-length(unique(tree$where)))*sum((y-predict(tree))^2))
}
mean(sds)
n=1000
p=10
depth=25
sds = rep(0, nTrials)
nTrials = 1000
for (i in 1:nTrials) {
print(i)
y <- rnorm(n)
X <- matrix(rnorm(n*p), nrow=n)
tree <- rpart(y~X, control=rpart.control(maxdepth=3))
sds[i] <- sqrt(1/(n-length(unique(tree$where)))*sum((y-predict(tree))^2))
}
mean(sds)
n=1000
p=10
depth=25
sds = rep(0, nTrials)
nTrials = 10000
for (i in 1:nTrials) {
print(i)
y <- rnorm(n)
X <- matrix(rnorm(n*p), nrow=n)
tree <- rpart(y~X, control=rpart.control(maxdepth=3))
sds[i] <- sqrt(1/(n-length(unique(tree$where)))*sum((y-predict(tree))^2))
}
mean(sds)
median(sds)
n=1000
p=10
depth=25
sds = rep(0, nTrials)
nTrials = 10000
for (i in 1:nTrials) {
print(i)
y <- rnorm(n, sd=5)
X <- matrix(rnorm(n*p), nrow=n)
tree <- rpart(y~X, control=rpart.control(maxdepth=3))
sds[i] <- sqrt(1/(n-length(unique(tree$where)))*sum((y-predict(tree))^2))
}
mean(sds)
n=1000
p=10
depth=25
sds = rep(0, nTrials)
nTrials = 100000
for (i in 1:nTrials) {
print(i)
y <- rnorm(n, sd=5)
X <- matrix(rnorm(n*p), nrow=n)
tree <- rpart(y~X, control=rpart.control(maxdepth=3))
sds[i] <- sqrt(1/(n-length(unique(tree$where)))*sum((y-predict(tree))^2))
}
